module rl::math;
import std::math;
//----------------------------------------------------------------------------------
// Module Functions Definition - Utils math
//----------------------------------------------------------------------------------

define Quaternion = rl::Quaternion;
define Matrix = rl::Matrix;

const float EPSILON = 0.000001f;

// Get float vector for Matrix
macro matrixToFloat(Matrix mat) 
{
    return matrixToFloatV(mat).v;
}

// Get float vector for Vector3
macro vector3ToFloat(Vector3 vec) 
{
    return vector3ToFloat(vec).v;
}

// NOTE: Helper types to be used instead of array return types for *ToFloat functions
struct Float3 {
    float[3] v;
}

struct Float16 {
    float[16] v;
}

// Clamp float value
// @ Use clamp function from std::math
// fn float clamp(float value, float min, float max) {}

// Calculate linear interpolation between two floats
fn float lerp(float start, float end, float amount) {
    float result = start + amount*(end - start);

    return result;
}

// Normalize input value within input range
fn float normalize(float value, float start, float end) {
    float result = (value - start)/(end - start);

    return result;
}

// Remap input value within input range to output range
fn float remap(float value, float inputStart, float inputEnd, float outputStart, float outputEnd) {
    float result = (value - inputStart)/(inputEnd - inputStart)*(outputEnd - outputStart) + outputStart;

    return result;
}

// Wrap input value from min to max
fn float wrap(float value, float min, float max) {
    float result = value - (max - min)*math::floor((value - min)/(max - min));

    return result;
}

// Check whether two given floats are almost equal
fn bool floatEquals(float x, float y) {
    bool result = (math::abs(x - y)) <= (EPSILON*math::max(1.0f, math::max(math::abs(x), math::abs(y))));

    return result;
}

//----------------------------------------------------------------------------------
// Module Functions Definition - Vector2 math
//----------------------------------------------------------------------------------

// Vector with components value 0.0f

fn Vector2 Vector2.setZero(Vector2* v)
{
   return *v = {};
}

// Vector with components value 1.0f
fn Vector2 Vector2.setOne(Vector2* v)
{
   return *v = { 1.0f, 1.0f };
}

// Add two vectors (v1 + v2)
fn Vector2 Vector2.add(Vector2* v1, Vector2 v2)
{
    return *v1 = { v1.x + v2.x, v1.y + v2.y };
}


// Add vector and float value
fn Vector2 Vector2.addValue(Vector2* v1, float add)
{
    return *v1 = { v1.x + add, v1.y + add };
}

// Subtract two vectors (v1 - v2)
fn Vector2 Vector2.subtract(Vector2* v1, Vector2 v2, Vector2 v3)
{
    return *v1 = { v2.x - v3.x, v2.y - v3.y };
}

// Subtract vector by float value
fn Vector2 Vector2.subtractValue(Vector2* v1, float sub)
{
   return *v1 = { v1.x - sub, v1.y - sub };
}

// Calculate vector length
fn float Vector2.length(Vector2 v)
{
    float result = math::sqrt((v.x*v.x) + (v.y*v.y));

    return result;
}

// Calculate vector square length
fn float Vector2.lengthSqr(Vector2 v)
{
    float result = (v.x*v.x) + (v.y*v.y);

    return result;
}

// Calculate two vectors dot product
fn float Vector2.dotProduct(Vector2 v1, Vector2 v2)
{
    float result = (v1.x*v2.x + v1.y*v2.y);

    return result;
}

// Calculate distance between two vectors
fn float Vector2.distance(Vector2 v1, Vector2 v2)
{
    float result = math::sqrt((v1.x - v2.x)*(v1.x - v2.x) + (v1.y - v2.y)*(v1.y - v2.y));

    return result;
}

// Calculate square distance between two vectors
fn float Vector2.distanceSqr(Vector2 v1, Vector2 v2)
{
    float result = ((v1.x - v2.x)*(v1.x - v2.x) + (v1.y - v2.y)*(v1.y - v2.y));

    return result;
}

 // Calculate angle from two vectors
fn float Vector2.angle(Vector2 v1, Vector2 v2)
{
    float result = math::atan2(v2.y, v2.x) - math::atan2(v1.y, v1.x);

    return result;
}

// Scale vector (multiply by value)
fn Vector2 Vector2.scale(Vector2* v, float scale)
{
    return *v = { v.x*scale, v.y*scale };
}

// Multiply vector by vector
fn Vector2 Vector2.multiply(Vector2* v1, Vector2 v2)
{
   return *v1 = { v1.x*v2.x, v1.y*v2.y };
}

// Negate vector
fn Vector2 Vector2.negate(Vector2* v)
{
   return *v = { -v.x, -v.y };
}

// Divide vector by vector
fn Vector2 Vector2.divide(Vector2* v, Vector2 v2)
{
   return *v = { v.x/v2.x, v.y/v2.y };
}

// Normalize provided vector
fn Vector2 Vector2.normalize(Vector2* v)
{
    Vector2 result = {};
    float length = math::sqrt((v.x*v.x) + (v.y*v.y));

    if (length > 0)
    {
        float ilength = 1.0f/length;
        result.x = v.x*ilength;
        result.y = v.y*ilength;
    }

   return *v = { result.x, result.y };
}

// Transforms a Vector2 by a given Matrix
fn Vector2 Vector2.transform(Vector2* v, Matrix mat)
{
    Vector2 result = { };

    float x = v.x;
    float y = v.y;
    float z = 0;

    result.x = mat.m0*x + mat.m4*y + mat.m8*z + mat.m12;
    result.y = mat.m1*x + mat.m5*y + mat.m9*z + mat.m13;

   return *v = result;
}

// Calculate linear interpolation between two vectors
fn Vector2 Vector2.lerp(Vector2* v1, Vector2 v2, float amount)
{
    Vector2 result = { };

    result.x = v1.x + amount*(v2.x - v1.x);
    result.y = v1.y + amount*(v2.y - v1.y);

   return *v1 = result;
}

// Calculate reflected vector to normal
fn Vector2 Vector2.reflect(Vector2* v1, Vector2 normal)
{
    Vector2 result = { };

    float dotProduct = (v1.x*normal.x + v1.y*normal.y); // Dot product

    result.x = v1.x - (2.0f*normal.x)*dotProduct;
    result.y = v1.y - (2.0f*normal.y)*dotProduct;

   return *v1 = result;
}

// Rotate vector by angle
fn Vector2 Vector2.rotate(Vector2* v, float angle)
{
    Vector2 result = { };

    float cosres = math::cos(angle);
    float sinres = math::sin(angle);

    result.x = v.x*cosres - v.y*sinres;
    result.y = v.x*sinres + v.y*cosres;

   return *v = result;
}

// Move Vector towards target
fn Vector2 Vector2.moveTowards(Vector2* v, Vector2 target, float maxDistance)
{
    Vector2 result = { };

    float dx = target.x - v.x;
    float dy = target.y - v.y;
    float value = (dx*dx) + (dy*dy);

    if ((value == 0) || ((maxDistance >= 0) && (value <= maxDistance*maxDistance))) return target;

    float dist = math::sqrt(value);

    result.x = v.x + dx/dist*maxDistance;
    result.y = v.y + dy/dist*maxDistance;

    *v = result;
    return *v;
}

// Invert the given vector
fn Vector2 Vector2.invert(Vector2* v)
{
    Vector2 result = { 1.0f/v.x, 1.0f/v.y };

   return *v = result;
}

// Clamp the components of the vector between
// min and max values specified by the given vectors
fn Vector2 Vector2.clamp(Vector2* v, Vector2 min, Vector2 max)
{
    Vector2 result = { };

    result.x = math::min(max.x, math::max(min.x, v.x));
    result.y = math::min(max.y, math::max(min.y, v.y));

   return *v = result;
}

// Clamp the magnitude of the vector between two min and max values
fn Vector2 Vector2.clampValue(Vector2* v, float min, float max)
{
    Vector2 result = *v;

    float length = (v.x*v.x) + (v.y*v.y);
    if (length > 0.0f)
    {
        length = math::sqrt(length);

        if (length < min)
        {
            float scale = min/length;
            result.x = v.x*scale;
            result.y = v.y*scale;
        }
        else if (length > max)
        {
            float scale = max/length;
            result.x = v.x*scale;
            result.y = v.y*scale;
        }
    }

   return *v = result;
}

// Check whether two given vectors are almost equal
fn bool Vector2.equals(Vector2 p, Vector2 q)
{
    bool result = ((math::abs(p.x - q.x)) <= (EPSILON*math::max(1.0f, math::max(math::abs(p.x), math::abs(q.x))))) && ((math::abs(p.y - q.y)) <= (EPSILON*math::max(1.0f, math::max(math::abs(p.y), math::abs(q.y)))));

    return result;
}

//----------------------------------------------------------------------------------
// Module Functions Definition - Vector3 math
//----------------------------------------------------------------------------------

// Vector with components value 0.0f
fn Vector3 Vector3.setZero(Vector3* v)
{
   return *v = { 0.0f, 0.0f, 0.0f };
}

// Vector with components value 1.0f
fn Vector3 Vector3.setOne(Vector3* v)
{
   return *v = { 1.0f, 1.0f, 1.0f };
}

// Add two vectors
fn Vector3 Vector3.add(Vector3* v1, Vector3 v2)
{
   return *v1 = { v1.x + v2.x, v1.y + v2.y, v1.z + v2.z };
}

// Add vector and float value
fn Vector3 Vector3.addValue(Vector3* v, float add)
{
   return *v = { v.x + add, v.y + add, v.z + add };
}

// Subtract two vectors
fn Vector3 Vector3.subtract(Vector3* v1, Vector3 v2)
{
   return *v1 = { v1.x - v2.x, v1.y - v2.y, v1.z - v2.z };
}

// Subtract vector by float value
fn Vector3 Vector3.subtractValue(Vector3* v, float sub)
{
   return *v = { v.x - sub, v.y - sub, v.z - sub };
}

// Multiply vector by scalar
fn Vector3 Vector3.scale(Vector3* v, float scalar)
{
   return *v = { v.x*scalar, v.y*scalar, v.z*scalar };
}

// Multiply vector by vector
fn Vector3 Vector3.multiply(Vector3* v1, Vector3 v2)
{
    return *v1 = { v1.x*v2.x, v1.y*v2.y, v1.z*v2.z };
}

// Calculate two vectors cross product
fn Vector3 Vector3.crossProduct(Vector3* v1, Vector3 v2)
{
   return *v1 = { v1.y*v2.z - v1.z*v2.y, v1.z*v2.x - v1.x*v2.z, v1.x*v2.y - v1.y*v2.x };
}

// Calculate one vector perpendicular vector
fn Vector3 Vector3.perpendicular(Vector3* v)
{
    Vector3 result = { };

    float min = (float) math::abs(v.x);
    Vector3 cardinalAxis = {1.0f, 0.0f, 0.0f};

    if (math::abs(v.y) < min)
    {
        min = (float) math::abs(v.y);
        Vector3 tmp = {0.0f, 1.0f, 0.0f};
        cardinalAxis = tmp;
    }

    if (math::abs(v.z) < min)
    {
        Vector3 tmp = {0.0f, 0.0f, 1.0f};
        cardinalAxis = tmp;
    }

    // Cross product between vectors
    result.x = v.y*cardinalAxis.z - v.z*cardinalAxis.y;
    result.y = v.z*cardinalAxis.x - v.x*cardinalAxis.z;
    result.z = v.x*cardinalAxis.y - v.y*cardinalAxis.x;

   return *v = result;
}

// Calculate vector length
fn float Vector3.length(Vector3 v)
{
    float result = math::sqrt(v.x*v.x + v.y*v.y + v.z*v.z);

    return result;
}

// Calculate vector square length
fn float Vector3.lengthSqr(Vector3 v)
{
    float result = v.x*v.x + v.y*v.y + v.z*v.z;

    return result;
}

// Calculate two vectors dot product
fn float Vector3.dotProduct(Vector3 v1, Vector3 v2)
{
    float result = (v1.x*v2.x + v1.y*v2.y + v1.z*v2.z);

    return result;
}

// Calculate distance between two vectors
fn float Vector3.distance(Vector3 v1, Vector3 v2)
{
    float result = 0.0f;

    float dx = v2.x - v1.x;
    float dy = v2.y - v1.y;
    float dz = v2.z - v1.z;
    result = math::sqrt(dx*dx + dy*dy + dz*dz);

    return result;
}

// Calculate square distance between two vectors
fn float Vector3.distanceSqr(Vector3 v1, Vector3 v2)
{
    float result = 0.0f;

    float dx = v2.x - v1.x;
    float dy = v2.y - v1.y;
    float dz = v2.z - v1.z;
    result = dx*dx + dy*dy + dz*dz;

    return result;
}

// Calculate angle between two vectors
fn float Vector3.angle(Vector3 v1, Vector3 v2)
{
    float result = 0.0f;

    Vector3 cross = { v1.y*v2.z - v1.z*v2.y, v1.z*v2.x - v1.x*v2.z, v1.x*v2.y - v1.y*v2.x };
    float len = math::sqrt(cross.x*cross.x + cross.y*cross.y + cross.z*cross.z);
    float dot = (v1.x*v2.x + v1.y*v2.y + v1.z*v2.z);
    result = math::atan2(len, dot);

    return result;
}

// Negate provided vector (invert direction)
fn Vector3 Vector3.negate(Vector3* v)
{
   return *v = { -v.x, -v.y, -v.z };
}

// Divide vector by vector
fn Vector3 Vector3.divide(Vector3* v1, Vector3 v2)
{
    return *v1 = { v1.x/v2.x, v1.y/v2.y, v1.z/v2.z };
}

// Normalize provided vector
fn Vector3 Vector3.normalize(Vector3* v)
{
    Vector3 result = *v;

    float length = math::sqrt(v.x*v.x + v.y*v.y + v.z*v.z);
    if (length == 0.0f) length = 1.0f;
    float ilength = 1.0f/length;

    result.x *= ilength;
    result.y *= ilength;
    result.z *= ilength;

   return *v = result;
}

// Orthonormalize provided vectors
// Makes vectors normalized and orthogonal to each other
// Gram-Schmidt function implementation
fn void Vector3.orthoNormalize(Vector3 *v1, Vector3 *v2)
{
    float length = 0.0f;
    float ilength = 0.0f;

    // Vector3Normalize(*v1);
    Vector3 v = *v1;
    length = math::sqrt(v.x*v.x + v.y*v.y + v.z*v.z);
    if (length == 0.0f) length = 1.0f;
    ilength = 1.0f/length;
    v1.x *= ilength;
    v1.y *= ilength;
    v1.z *= ilength;

    // Vector3CrossProduct(*v1, *v2)
Vector3 vn1 = { v1.y*v2.z - v1.z*v2.y, v1.z*v2.x - v1.x*v2.z, v1.x*v2.y - v1.y*v2.x };

    // Vector3Normalize(vn1);
    v = vn1;
    length = math::sqrt(v.x*v.x + v.y*v.y + v.z*v.z);
    if (length == 0.0f) length = 1.0f;
    ilength = 1.0f/length;
    vn1.x *= ilength;
    vn1.y *= ilength;
    vn1.z *= ilength;

    // Vector3CrossProduct(vn1, *v1)
    Vector3 vn2 = { vn1.y*v1.z - vn1.z*v1.y, vn1.z*v1.x - vn1.x*v1.z, vn1.x*v1.y - vn1.y*v1.x };

    *v2 = vn2;

}

// Transforms a Vector3 by a given Matrix
fn Vector3 Vector3.transform(Vector3* v, Matrix mat)
{
    Vector3 result = { };

    float x = v.x;
    float y = v.y;
    float z = v.z;

    result.x = mat.m0*x + mat.m4*y + mat.m8*z + mat.m12;
    result.y = mat.m1*x + mat.m5*y + mat.m9*z + mat.m13;
    result.z = mat.m2*x + mat.m6*y + mat.m10*z + mat.m14;

   return *v = result;
}

// Transform a vector by quaternion rotation
fn Vector3 Vector3.rotateByQuaternion(Vector3* v, Quaternion q)
{
    Vector3 result = { };

    result.x = v.x*(q.x*q.x + q.w*q.w - q.y*q.y - q.z*q.z) + v.y*(2*q.x*q.y - 2*q.w*q.z) + v.z*(2*q.x*q.z + 2*q.w*q.y);
    result.y = v.x*(2*q.w*q.z + 2*q.x*q.y) + v.y*(q.w*q.w - q.x*q.x + q.y*q.y - q.z*q.z) + v.z*(-2*q.w*q.x + 2*q.y*q.z);
    result.z = v.x*(-2*q.w*q.y + 2*q.x*q.z) + v.y*(2*q.w*q.x + 2*q.y*q.z)+ v.z*(q.w*q.w - q.x*q.x - q.y*q.y + q.z*q.z);

   return *v = result;
}

// Rotates a vector around an axis
fn Vector3 Vector3.rotateByAxisAngle(Vector3* v, Vector3 axis, float angle)
{
    // Using Euler-Rodrigues Formula
    // Ref.: https://en.wikipedia.org/w/index.php?title=Euler%E2%80%93Rodrigues_formula

    Vector3 result = *v;

    // Vector3Normalize(axis);
    float length = math::sqrt(axis.x * axis.x + axis.y * axis.y + axis.z * axis.z);
    if (length == 0.0f) length = 1.0f;
    float ilength = 1.0f / length;
    axis.x *= ilength;
    axis.y *= ilength;
    axis.z *= ilength;

    angle /= 2.0f;
    float a = math::sin(angle);
    float b = axis.x * a;
    float c = axis.y * a;
    float d = axis.z * a;
    a = math::cos(angle);
    Vector3 w = { b, c, d };

    // Vector3CrossProduct(w, v)
    Vector3 wv = { w.y * v.z - w.z * v.y, w.z * v.x - w.x * v.z, w.x * v.y - w.y * v.x };

    // Vector3CrossProduct(w, wv)
    Vector3 wwv = { w.y * wv.z - w.z * wv.y, w.z * wv.x - w.x * wv.z, w.x * wv.y - w.y * wv.x };

    // Vector3Scale(wv, 2 * a)
    a *= 2;
    wv.x *= a;
    wv.y *= a;
    wv.z *= a;

    // Vector3Scale(wwv, 2)
    wwv.x *= 2;
    wwv.y *= 2;
    wwv.z *= 2;

    result.x += wv.x;
    result.y += wv.y;
    result.z += wv.z;

    result.x += wwv.x;
    result.y += wwv.y;
    result.z += wwv.z;

   return *v = result;
}

// Calculate linear interpolation between two vectors
fn Vector3 Vector3.lerp(Vector3* v1, Vector3 v2, float amount)
{
    Vector3 result = { };

    result.x = v1.x + amount*(v2.x - v1.x);
    result.y = v1.y + amount*(v2.y - v1.y);
    result.z = v1.z + amount*(v2.z - v1.z);

    return *v1 = result;
}

// Calculate reflected vector to normal
fn Vector3 Vector3.reflect(Vector3* v, Vector3 normal)
{
    Vector3 result = { };

    // I is the original vector
    // N is the normal of the incident plane
    // R = I - (2*N*(DotProduct[I, N]))

    float dotProduct = (v.x*normal.x + v.y*normal.y + v.z*normal.z);

    result.x = v.x - (2.0f*normal.x)*dotProduct;
    result.y = v.y - (2.0f*normal.y)*dotProduct;
    result.z = v.z - (2.0f*normal.z)*dotProduct;

   return *v = result;
}

// Get min value for each pair of components
fn Vector3 Vector3.min(Vector3* v1, Vector3 v2)
{
    Vector3 result = { };

    result.x = math::min(v1.x, v2.x);
    result.y = math::min(v1.y, v2.y);
    result.z = math::min(v1.z, v2.z);

   return *v1 = result;
}

// Get max value for each pair of components
fn Vector3 Vector3.max(Vector3* v1, Vector3 v2)
{
    Vector3 result = { };

    result.x = math::max(v1.x, v2.x);
    result.y = math::max(v1.y, v2.y);
    result.z = math::max(v1.z, v2.z);

   return *v1 = result;
}

// Compute barycenter coordinates (u, v, w) for point p with respect to triangle (a, b, c)
// NOTE: Assumes P is on the plane of the triangle
fn Vector3 Vector3.barycenter(Vector3* p, Vector3 a, Vector3 b, Vector3 c)
{
    Vector3 result = { };

    Vector3 v0 = { b.x - a.x, b.y - a.y, b.z - a.z };   // Vector3Subtract(b, a)
    Vector3 v1 = { c.x - a.x, c.y - a.y, c.z - a.z };   // Vector3Subtract(c, a)
    Vector3 v2 = { p.x - a.x, p.y - a.y, p.z - a.z };   // Vector3Subtract(p, a)
    float d00 = (v0.x*v0.x + v0.y*v0.y + v0.z*v0.z);    // Vector3DotProduct(v0, v0)
    float d01 = (v0.x*v1.x + v0.y*v1.y + v0.z*v1.z);    // Vector3DotProduct(v0, v1)
    float d11 = (v1.x*v1.x + v1.y*v1.y + v1.z*v1.z);    // Vector3DotProduct(v1, v1)
    float d20 = (v2.x*v0.x + v2.y*v0.y + v2.z*v0.z);    // Vector3DotProduct(v2, v0)
    float d21 = (v2.x*v1.x + v2.y*v1.y + v2.z*v1.z);    // Vector3DotProduct(v2, v1)

    float denom = d00*d11 - d01*d01;

    result.y = (d11*d20 - d01*d21)/denom;
    result.z = (d00*d21 - d01*d20)/denom;
    result.x = 1.0f - (result.z + result.y);

   return *p = result;
}

// Projects a Vector3 from screen space into object space
// NOTE: We are avoiding calling other raymath functions despite available
fn Vector3 Vector3.unproject(Vector3* source, Matrix projection, Matrix view)
{
    Vector3 result = { };

    // Calculate unproject matrix (multiply view patrix by projection matrix) and invert it
    Matrix matViewProj = {      // MatrixMultiply(view, projection);
        view.m0*projection.m0 + view.m1*projection.m4 + view.m2*projection.m8 + view.m3*projection.m12,
        view.m0*projection.m1 + view.m1*projection.m5 + view.m2*projection.m9 + view.m3*projection.m13,
        view.m0*projection.m2 + view.m1*projection.m6 + view.m2*projection.m10 + view.m3*projection.m14,
        view.m0*projection.m3 + view.m1*projection.m7 + view.m2*projection.m11 + view.m3*projection.m15,
        view.m4*projection.m0 + view.m5*projection.m4 + view.m6*projection.m8 + view.m7*projection.m12,
        view.m4*projection.m1 + view.m5*projection.m5 + view.m6*projection.m9 + view.m7*projection.m13,
        view.m4*projection.m2 + view.m5*projection.m6 + view.m6*projection.m10 + view.m7*projection.m14,
        view.m4*projection.m3 + view.m5*projection.m7 + view.m6*projection.m11 + view.m7*projection.m15,
        view.m8*projection.m0 + view.m9*projection.m4 + view.m10*projection.m8 + view.m11*projection.m12,
        view.m8*projection.m1 + view.m9*projection.m5 + view.m10*projection.m9 + view.m11*projection.m13,
        view.m8*projection.m2 + view.m9*projection.m6 + view.m10*projection.m10 + view.m11*projection.m14,
        view.m8*projection.m3 + view.m9*projection.m7 + view.m10*projection.m11 + view.m11*projection.m15,
        view.m12*projection.m0 + view.m13*projection.m4 + view.m14*projection.m8 + view.m15*projection.m12,
        view.m12*projection.m1 + view.m13*projection.m5 + view.m14*projection.m9 + view.m15*projection.m13,
        view.m12*projection.m2 + view.m13*projection.m6 + view.m14*projection.m10 + view.m15*projection.m14,
        view.m12*projection.m3 + view.m13*projection.m7 + view.m14*projection.m11 + view.m15*projection.m15 };

    // Calculate inverted matrix -> MatrixInvert(matViewProj);
    // Cache the matrix values (speed optimization)
    float a00 = matViewProj.m0;
    float a01 = matViewProj.m1;
    float a02 = matViewProj.m2;
    float a03 = matViewProj.m3;
    float a10 = matViewProj.m4;
    float a11 = matViewProj.m5; 
    float a12 = matViewProj.m6; 
    float a13 = matViewProj.m7;
    float a20 = matViewProj.m8;
    float a21 = matViewProj.m9;
    float a22 = matViewProj.m10;
    float a23 = matViewProj.m11;
    float a30 = matViewProj.m12;
    float a31 = matViewProj.m13;
    float a32 = matViewProj.m14;
    float a33 = matViewProj.m15;

    float b00 = a00*a11 - a01*a10;
    float b01 = a00*a12 - a02*a10;
    float b02 = a00*a13 - a03*a10;
    float b03 = a01*a12 - a02*a11;
    float b04 = a01*a13 - a03*a11;
    float b05 = a02*a13 - a03*a12;
    float b06 = a20*a31 - a21*a30;
    float b07 = a20*a32 - a22*a30;
    float b08 = a20*a33 - a23*a30;
    float b09 = a21*a32 - a22*a31;
    float b10 = a21*a33 - a23*a31;
    float b11 = a22*a33 - a23*a32;

    // Calculate the invert determinant (inlined to avoid double-caching)
    float invDet = 1.0f/(b00*b11 - b01*b10 + b02*b09 + b03*b08 - b04*b07 + b05*b06);

    Matrix matViewProjInv = {
        (a11*b11 - a12*b10 + a13*b09)*invDet,
        (-a01*b11 + a02*b10 - a03*b09)*invDet,
        (a31*b05 - a32*b04 + a33*b03)*invDet,
        (-a21*b05 + a22*b04 - a23*b03)*invDet,
        (-a10*b11 + a12*b08 - a13*b07)*invDet,
        (a00*b11 - a02*b08 + a03*b07)*invDet,
        (-a30*b05 + a32*b02 - a33*b01)*invDet,
        (a20*b05 - a22*b02 + a23*b01)*invDet,
        (a10*b10 - a11*b08 + a13*b06)*invDet,
        (-a00*b10 + a01*b08 - a03*b06)*invDet,
        (a30*b04 - a31*b02 + a33*b00)*invDet,
        (-a20*b04 + a21*b02 - a23*b00)*invDet,
        (-a10*b09 + a11*b07 - a12*b06)*invDet,
        (a00*b09 - a01*b07 + a02*b06)*invDet,
        (-a30*b03 + a31*b01 - a32*b00)*invDet,
        (a20*b03 - a21*b01 + a22*b00)*invDet };

    // Create quaternion from source point
    Quaternion quat = { source.x, source.y, source.z, 1.0f };

    // Multiply quat point by unproject matrix
    Quaternion qtransformed = {     // QuaternionTransform(quat, matViewProjInv)
        matViewProjInv.m0*quat.x + matViewProjInv.m4*quat.y + matViewProjInv.m8*quat.z + matViewProjInv.m12*quat.w,
        matViewProjInv.m1*quat.x + matViewProjInv.m5*quat.y + matViewProjInv.m9*quat.z + matViewProjInv.m13*quat.w,
        matViewProjInv.m2*quat.x + matViewProjInv.m6*quat.y + matViewProjInv.m10*quat.z + matViewProjInv.m14*quat.w,
        matViewProjInv.m3*quat.x + matViewProjInv.m7*quat.y + matViewProjInv.m11*quat.z + matViewProjInv.m15*quat.w };

    // Normalized world points in vectors
    result.x = qtransformed.x/qtransformed.w;
    result.y = qtransformed.y/qtransformed.w;
    result.z = qtransformed.z/qtransformed.w;

   return *source = result;
}

// Get Vector3 as float array
fn Float3 Vector3.toFloatV(Vector3* v)
{
    Float3 buffer = { };

    buffer.v[0] = v.x;
    buffer.v[1] = v.y;
    buffer.v[2] = v.z;

    return buffer;
}

// Invert the given vector
fn Vector3 Vector3.invert(Vector3* v)
{
    Vector3 result = { 1.0f/v.x, 1.0f/v.y, 1.0f/v.z };

   return *v = result;
}

// Clamp the components of the vector between
// min and max values specified by the given vectors
fn Vector3 Vector3.clamp(Vector3* v, Vector3 min, Vector3 max)
{
    Vector3 result = { };

    result.x = math::min(max.x, math::max(min.x, v.x));
    result.y = math::min(max.y, math::max(min.y, v.y));
    result.z = math::min(max.z, math::max(min.z, v.z));

   return *v = result;
}

// Clamp the magnitude of the vector between two values
fn Vector3 Vector3.clampValue(Vector3* v, float min, float max)
{
    Vector3 result = *v;

    float length = (v.x*v.x) + (v.y*v.y) + (v.z*v.z);
    if (length > 0.0f)
    {
        length = math::sqrt(length);

        if (length < min)
        {
            float scale = min/length;
            result.x = v.x*scale;
            result.y = v.y*scale;
            result.z = v.z*scale;
        }
        else if (length > max)
        {
            float scale = max/length;
            result.x = v.x*scale;
            result.y = v.y*scale;
            result.z = v.z*scale;
        }
    }

   return *v = result;
}

// Check whether two given vectors are almost equal
fn bool Vector3.equals(Vector3* p, Vector3 q)
{
    bool result = ((math::abs(p.x - q.x)) <= (EPSILON*math::max(1.0f, math::max(math::abs(p.x), math::abs(q.x))))) &&
                  ((math::abs(p.y - q.y)) <= (EPSILON*math::max(1.0f, math::max(math::abs(p.y), math::abs(q.y))))) &&
                  ((math::abs(p.z - q.z)) <= (EPSILON*math::max(1.0f, math::max(math::abs(p.z), math::abs(q.z)))));

    return result;
}

// Compute the direction of a refracted ray where v specifies the
// normalized direction of the incoming ray, n specifies the
// normalized normal vector of the interface of two optical media,
// and r specifies the ratio of the refractive index of the medium
// from where the ray comes to the refractive index of the medium
// on the other side of the surface
fn Vector3 Vector3.refract(Vector3* v, Vector3 n, float r)
{
    Vector3 result = { };

    float dot = v.x*n.x + v.y*n.y + v.z*n.z;
    float d = 1.0f - r*r*(1.0f - dot*dot);

    if (d >= 0.0f)
    {
        d = math::sqrt(d);
        v.x = r*v.x - (r*dot + d)*n.x;
        v.y = r*v.y - (r*dot + d)*n.y;
        v.z = r*v.z - (r*dot + d)*n.z;

        result = *v;
    }

   return *v = result;
}

//----------------------------------------------------------------------------------
// Module Functions Definition - Matrix math
//----------------------------------------------------------------------------------

// Compute matrix determinant
fn float Matrix.determinant(Matrix mat)
{
    float result = 0.0f;

    // Cache the matrix values (speed optimization)
    float a00 = mat.m0;
    float a01 = mat.m1;
    float a02 = mat.m2;
    float a03 = mat.m3;
    float a10 = mat.m4;
    float a11 = mat.m5;
    float a12 = mat.m6;
    float a13 = mat.m7;
    float a20 = mat.m8;
    float a21 = mat.m9;
    float a22 = mat.m10;
    float a23 = mat.m11;
    float a30 = mat.m12;
    float a31 = mat.m13;
    float a32 = mat.m14;
    float a33 = mat.m15;

    result = a30*a21*a12*a03 - a20*a31*a12*a03 - a30*a11*a22*a03 + a10*a31*a22*a03 +
             a20*a11*a32*a03 - a10*a21*a32*a03 - a30*a21*a02*a13 + a20*a31*a02*a13 +
             a30*a01*a22*a13 - a00*a31*a22*a13 - a20*a01*a32*a13 + a00*a21*a32*a13 +
             a30*a11*a02*a23 - a10*a31*a02*a23 - a30*a01*a12*a23 + a00*a31*a12*a23 +
             a10*a01*a32*a23 - a00*a11*a32*a23 - a20*a11*a02*a33 + a10*a21*a02*a33 +
             a20*a01*a12*a33 - a00*a21*a12*a33 - a10*a01*a22*a33 + a00*a11*a22*a33;

    return result;
}

// Get the trace of the matrix (sum of the values along the diagonal)
fn float Matrix.trace(Matrix mat)
{
    float result = (mat.m0 + mat.m5 + mat.m10 + mat.m15);

    return result;
}

// Transposes provided matrix
fn Matrix Matrix.transpose(Matrix* mat)
{
    Matrix result = { };

    result.m0 = mat.m0;
    result.m1 = mat.m4;
    result.m2 = mat.m8;
    result.m3 = mat.m12;
    result.m4 = mat.m1;
    result.m5 = mat.m5;
    result.m6 = mat.m9;
    result.m7 = mat.m13;
    result.m8 = mat.m2;
    result.m9 = mat.m6;
    result.m10 = mat.m10;
    result.m11 = mat.m14;
    result.m12 = mat.m3;
    result.m13 = mat.m7;
    result.m14 = mat.m11;
    result.m15 = mat.m15;

    return *mat = result;
}

// Invert provided matrix
fn Matrix Matrix.invert(Matrix* mat)
{
    Matrix result = { };

    // Cache the matrix values (speed optimization)
    float a00 = mat.m0;
    float a01 = mat.m1;
    float a02 = mat.m2;
    float a03 = mat.m3;
    float a10 = mat.m4;
    float a11 = mat.m5;
    float a12 = mat.m6;
    float a13 = mat.m7;
    float a20 = mat.m8;
    float a21 = mat.m9;
    float a22 = mat.m10;
    float a23 = mat.m11;
    float a30 = mat.m12;
    float a31 = mat.m13;
    float a32 = mat.m14;
    float a33 = mat.m15;

    float b00 = a00*a11 - a01*a10;
    float b01 = a00*a12 - a02*a10;
    float b02 = a00*a13 - a03*a10;
    float b03 = a01*a12 - a02*a11;
    float b04 = a01*a13 - a03*a11;
    float b05 = a02*a13 - a03*a12;
    float b06 = a20*a31 - a21*a30;
    float b07 = a20*a32 - a22*a30;
    float b08 = a20*a33 - a23*a30;
    float b09 = a21*a32 - a22*a31;
    float b10 = a21*a33 - a23*a31;
    float b11 = a22*a33 - a23*a32;

    // Calculate the invert determinant (inlined to avoid double-caching)
    float invDet = 1.0f/(b00*b11 - b01*b10 + b02*b09 + b03*b08 - b04*b07 + b05*b06);

    result.m0 = (a11*b11 - a12*b10 + a13*b09)*invDet;
    result.m1 = (-a01*b11 + a02*b10 - a03*b09)*invDet;
    result.m2 = (a31*b05 - a32*b04 + a33*b03)*invDet;
    result.m3 = (-a21*b05 + a22*b04 - a23*b03)*invDet;
    result.m4 = (-a10*b11 + a12*b08 - a13*b07)*invDet;
    result.m5 = (a00*b11 - a02*b08 + a03*b07)*invDet;
    result.m6 = (-a30*b05 + a32*b02 - a33*b01)*invDet;
    result.m7 = (a20*b05 - a22*b02 + a23*b01)*invDet;
    result.m8 = (a10*b10 - a11*b08 + a13*b06)*invDet;
    result.m9 = (-a00*b10 + a01*b08 - a03*b06)*invDet;
    result.m10 = (a30*b04 - a31*b02 + a33*b00)*invDet;
    result.m11 = (-a20*b04 + a21*b02 - a23*b00)*invDet;
    result.m12 = (-a10*b09 + a11*b07 - a12*b06)*invDet;
    result.m13 = (a00*b09 - a01*b07 + a02*b06)*invDet;
    result.m14 = (-a30*b03 + a31*b01 - a32*b00)*invDet;
    result.m15 = (a20*b03 - a21*b01 + a22*b00)*invDet;

   return *mat = result;
}

// Get identity matrix
fn Matrix Matrix.identity(Matrix* mat)
{
    Matrix result = { 1.0f, 0.0f, 0.0f, 0.0f,
                      0.0f, 1.0f, 0.0f, 0.0f,
                      0.0f, 0.0f, 1.0f, 0.0f,
                      0.0f, 0.0f, 0.0f, 1.0f };

   return *mat = result;
}

// Add two matrices
fn Matrix Matrix.add(Matrix* left, Matrix right)
{
    Matrix result = { };

    result.m0 = left.m0 + right.m0;
    result.m1 = left.m1 + right.m1;
    result.m2 = left.m2 + right.m2;
    result.m3 = left.m3 + right.m3;
    result.m4 = left.m4 + right.m4;
    result.m5 = left.m5 + right.m5;
    result.m6 = left.m6 + right.m6;
    result.m7 = left.m7 + right.m7;
    result.m8 = left.m8 + right.m8;
    result.m9 = left.m9 + right.m9;
    result.m10 = left.m10 + right.m10;
    result.m11 = left.m11 + right.m11;
    result.m12 = left.m12 + right.m12;
    result.m13 = left.m13 + right.m13;
    result.m14 = left.m14 + right.m14;
    result.m15 = left.m15 + right.m15;

   return *left = result;
}

// Subtract two matrices (left - right)
fn Matrix Matrix.subtract(Matrix* left, Matrix right)
{
    Matrix result = { };

    result.m0 = left.m0 - right.m0;
    result.m1 = left.m1 - right.m1;
    result.m2 = left.m2 - right.m2;
    result.m3 = left.m3 - right.m3;
    result.m4 = left.m4 - right.m4;
    result.m5 = left.m5 - right.m5;
    result.m6 = left.m6 - right.m6;
    result.m7 = left.m7 - right.m7;
    result.m8 = left.m8 - right.m8;
    result.m9 = left.m9 - right.m9;
    result.m10 = left.m10 - right.m10;
    result.m11 = left.m11 - right.m11;
    result.m12 = left.m12 - right.m12;
    result.m13 = left.m13 - right.m13;
    result.m14 = left.m14 - right.m14;
    result.m15 = left.m15 - right.m15;

   return *left = result;
}

// Get two matrix multiplication
// NOTE: When multiplying matrices... the order matters!
fn Matrix Matrix.multiply(Matrix* left, Matrix right)
{
    Matrix result = { };

    result.m0 = left.m0*right.m0 + left.m1*right.m4 + left.m2*right.m8 + left.m3*right.m12;
    result.m1 = left.m0*right.m1 + left.m1*right.m5 + left.m2*right.m9 + left.m3*right.m13;
    result.m2 = left.m0*right.m2 + left.m1*right.m6 + left.m2*right.m10 + left.m3*right.m14;
    result.m3 = left.m0*right.m3 + left.m1*right.m7 + left.m2*right.m11 + left.m3*right.m15;
    result.m4 = left.m4*right.m0 + left.m5*right.m4 + left.m6*right.m8 + left.m7*right.m12;
    result.m5 = left.m4*right.m1 + left.m5*right.m5 + left.m6*right.m9 + left.m7*right.m13;
    result.m6 = left.m4*right.m2 + left.m5*right.m6 + left.m6*right.m10 + left.m7*right.m14;
    result.m7 = left.m4*right.m3 + left.m5*right.m7 + left.m6*right.m11 + left.m7*right.m15;
    result.m8 = left.m8*right.m0 + left.m9*right.m4 + left.m10*right.m8 + left.m11*right.m12;
    result.m9 = left.m8*right.m1 + left.m9*right.m5 + left.m10*right.m9 + left.m11*right.m13;
    result.m10 = left.m8*right.m2 + left.m9*right.m6 + left.m10*right.m10 + left.m11*right.m14;
    result.m11 = left.m8*right.m3 + left.m9*right.m7 + left.m10*right.m11 + left.m11*right.m15;
    result.m12 = left.m12*right.m0 + left.m13*right.m4 + left.m14*right.m8 + left.m15*right.m12;
    result.m13 = left.m12*right.m1 + left.m13*right.m5 + left.m14*right.m9 + left.m15*right.m13;
    result.m14 = left.m12*right.m2 + left.m13*right.m6 + left.m14*right.m10 + left.m15*right.m14;
    result.m15 = left.m12*right.m3 + left.m13*right.m7 + left.m14*right.m11 + left.m15*right.m15;

   return *left = result;
}

// Get translation matrix
fn Matrix Matrix.translate(Matrix* mat, float x, float y, float z)
{
    Matrix result = { 1.0f, 0.0f, 0.0f, x,
                      0.0f, 1.0f, 0.0f, y,
                      0.0f, 0.0f, 1.0f, z,
                      0.0f, 0.0f, 0.0f, 1.0f };

   return *mat = result;
}

// Create rotation matrix from axis and angle
// NOTE: Angle should be provided in radians
fn Matrix Matrix.rotate(Matrix* mat, Vector3 axis, float angle)
{
    Matrix result = { };

    float x = axis.x;
    float y = axis.y;
    float z = axis.z;

    float lengthSquared = x*x + y*y + z*z;

    if ((lengthSquared != 1.0f) && (lengthSquared != 0.0f))
    {
        float ilength = 1.0f/math::sqrt(lengthSquared);
        x *= ilength;
        y *= ilength;
        z *= ilength;
    }

    float sinres = math::sin(angle);
    float cosres = math::cos(angle);
    float t = 1.0f - cosres;

    result.m0 = x*x*t + cosres;
    result.m1 = y*x*t + z*sinres;
    result.m2 = z*x*t - y*sinres;
    result.m3 = 0.0f;

    result.m4 = x*y*t - z*sinres;
    result.m5 = y*y*t + cosres;
    result.m6 = z*y*t + x*sinres;
    result.m7 = 0.0f;

    result.m8 = x*z*t + y*sinres;
    result.m9 = y*z*t - x*sinres;
    result.m10 = z*z*t + cosres;
    result.m11 = 0.0f;

    result.m12 = 0.0f;
    result.m13 = 0.0f;
    result.m14 = 0.0f;
    result.m15 = 1.0f;

   return *mat = result;
}

// Get x-rotation matrix
// NOTE: Angle must be provided in radians
fn Matrix Matrix.rotateX(Matrix* mat, float angle)
{
    Matrix result = { 1.0f, 0.0f, 0.0f, 0.0f,
                      0.0f, 1.0f, 0.0f, 0.0f,
                      0.0f, 0.0f, 1.0f, 0.0f,
                      0.0f, 0.0f, 0.0f, 1.0f }; // MatrixIdentity()

    float cosres = math::cos(angle);
    float sinres = math::sin(angle);

    result.m5 = cosres;
    result.m6 = sinres;
    result.m9 = -sinres;
    result.m10 = cosres;

   return *mat = result;
}

// Get y-rotation matrix
// NOTE: Angle must be provided in radians
fn Matrix Matrix.rotateY(Matrix* mat, float angle)
{
    Matrix result = { 1.0f, 0.0f, 0.0f, 0.0f,
                      0.0f, 1.0f, 0.0f, 0.0f,
                      0.0f, 0.0f, 1.0f, 0.0f,
                      0.0f, 0.0f, 0.0f, 1.0f }; // MatrixIdentity()

    float cosres = math::cos(angle);
    float sinres = math::sin(angle);

    result.m0 = cosres;
    result.m2 = -sinres;
    result.m8 = sinres;
    result.m10 = cosres;

   return *mat = result;
}

// Get z-rotation matrix
// NOTE: Angle must be provided in radians
fn Matrix Matrix.rotateZ(Matrix* mat, float angle)
{
    Matrix result = { 1.0f, 0.0f, 0.0f, 0.0f,
                      0.0f, 1.0f, 0.0f, 0.0f,
                      0.0f, 0.0f, 1.0f, 0.0f,
                      0.0f, 0.0f, 0.0f, 1.0f }; // MatrixIdentity()

    float cosres = math::cos(angle);
    float sinres = math::sin(angle);

    result.m0 = cosres;
    result.m1 = sinres;
    result.m4 = -sinres;
    result.m5 = cosres;

   return *mat = result;
}


// Get xyz-rotation matrix
// NOTE: Angle must be provided in radians
fn Matrix Matrix.rotateXYZ(Matrix* mat, Vector3 angle)
{
    Matrix result = { 1.0f, 0.0f, 0.0f, 0.0f,
                      0.0f, 1.0f, 0.0f, 0.0f,
                      0.0f, 0.0f, 1.0f, 0.0f,
                      0.0f, 0.0f, 0.0f, 1.0f }; // MatrixIdentity()

    float cosz = math::cos(-angle.z);
    float sinz = math::sin(-angle.z);
    float cosy = math::cos(-angle.y);
    float siny = math::sin(-angle.y);
    float cosx = math::cos(-angle.x);
    float sinx = math::sin(-angle.x);

    result.m0 = cosz*cosy;
    result.m1 = (cosz*siny*sinx) - (sinz*cosx);
    result.m2 = (cosz*siny*cosx) + (sinz*sinx);

    result.m4 = sinz*cosy;
    result.m5 = (sinz*siny*sinx) + (cosz*cosx);
    result.m6 = (sinz*siny*cosx) - (cosz*sinx);

    result.m8 = -siny;
    result.m9 = cosy*sinx;
    result.m10= cosy*cosx;

   return *mat = result;
}

// Get zyx-rotation matrix
// NOTE: Angle must be provided in radians
fn Matrix Matrix.rotateZYX(Matrix* mat, Vector3 angle)
{
    Matrix result = { };

    float cz = math::cos(angle.z);
    float sz = math::sin(angle.z);
    float cy = math::cos(angle.y);
    float sy = math::sin(angle.y);
    float cx = math::cos(angle.x);
    float sx = math::sin(angle.x);

    result.m0 = cz*cy;
    result.m4 = cz*sy*sx - cx*sz;
    result.m8 = sz*sx + cz*cx*sy;
    result.m12 = 0;

    result.m1 = cy*sz;
    result.m5 = cz*cx + sz*sy*sx;
    result.m9 = cx*sz*sy - cz*sx;
    result.m13 = 0;

    result.m2 = -sy;
    result.m6 = cy*sx;
    result.m10 = cy*cx;
    result.m14 = 0;

    result.m3 = 0;
    result.m7 = 0;
    result.m11 = 0;
    result.m15 = 1;

   return *mat = result;
}

// Get scaling matrix
fn Matrix Matrix.scale(Matrix* mat, float x, float y, float z)
{
    Matrix result = { x, 0.0f, 0.0f, 0.0f,
                      0.0f, y, 0.0f, 0.0f,
                      0.0f, 0.0f, z, 0.0f,
                      0.0f, 0.0f, 0.0f, 1.0f };

   return *mat = result;
}

// Get perspective projection matrix
fn Matrix Matrix.frustum(Matrix* mat, double left, double right, double bottom, double top, double near, double far)
{
    Matrix result = { };

    float rl = (float)(right - left);
    float tb = (float)(top - bottom);
    float fnn = (float)(far - near);

    result.m0 = ((float)near*2.0f)/rl;
    result.m1 = 0.0f;
    result.m2 = 0.0f;
    result.m3 = 0.0f;

    result.m4 = 0.0f;
    result.m5 = ((float)near*2.0f)/tb;
    result.m6 = 0.0f;
    result.m7 = 0.0f;

    result.m8 = ((float)right + (float)left)/rl;
    result.m9 = ((float)top + (float)bottom)/tb;
    result.m10 = -((float)far + (float)near)/fnn;
    result.m11 = -1.0f;

    result.m12 = 0.0f;
    result.m13 = 0.0f;
    result.m14 = -((float)far*(float)near*2.0f)/fnn;
    result.m15 = 0.0f;

   return *mat = result;
}

// Get perspective projection matrix
// NOTE: Fovy angle must be provided in radians
fn Matrix Matrix.perspective(Matrix* mat, double fovy, double aspect, double near, double far)
{
    Matrix result = { };

    double top = near*math::tan(fovy*0.5);
    double bottom = -top;
    double right = top*aspect;
    double left = -right;

    // MatrixFrustum(-right, right, -top, top, near, far);
    float rl = (float)(right - left);
    float tb = (float)(top - bottom);
    float fnn = (float)(far - near);

    result.m0 = ((float)near*2.0f)/rl;
    result.m5 = ((float)near*2.0f)/tb;
    result.m8 = ((float)right + (float)left)/rl;
    result.m9 = ((float)top + (float)bottom)/tb;
    result.m10 = -((float)far + (float)near)/fnn;
    result.m11 = -1.0f;
    result.m14 = -((float)far*(float)near*2.0f)/fnn;

   return *mat = result;
}

// Get orthographic projection matrix
fn Matrix Matrix.ortho(Matrix* mat, double left, double right, double bottom, double top, double near, double far)
{
    Matrix result = { };

    float rl = (float)(right - left);
    float tb = (float)(top - bottom);
    float fnn = (float)(far - near);

    result.m0 = 2.0f/rl;
    result.m1 = 0.0f;
    result.m2 = 0.0f;
    result.m3 = 0.0f;
    result.m4 = 0.0f;
    result.m5 = 2.0f/tb;
    result.m6 = 0.0f;
    result.m7 = 0.0f;
    result.m8 = 0.0f;
    result.m9 = 0.0f;
    result.m10 = -2.0f/fnn;
    result.m11 = 0.0f;
    result.m12 = -((float)left + (float)right)/rl;
    result.m13 = -((float)top + (float)bottom)/tb;
    result.m14 = -((float)far + (float)near)/fnn;
    result.m15 = 1.0f;

   return *mat = result;
}

// Get camera look-at matrix (view matrix)
fn Matrix Matrix.lookAt(Matrix* mat, Vector3 eye, Vector3 target, Vector3 up)
{
    Matrix result = { };

    float length = 0.0f;
    float ilength = 0.0f;

    // Vector3Subtract(eye, target)
    Vector3 vz = { eye.x - target.x, eye.y - target.y, eye.z - target.z };

    // Vector3Normalize(vz)
    Vector3 v = vz;
    length = math::sqrt(v.x*v.x + v.y*v.y + v.z*v.z);
    if (length == 0.0f) length = 1.0f;
    ilength = 1.0f/length;
    vz.x *= ilength;
    vz.y *= ilength;
    vz.z *= ilength;

    // Vector3CrossProduct(up, vz)
    Vector3 vx = { up.y*vz.z - up.z*vz.y, up.z*vz.x - up.x*vz.z, up.x*vz.y - up.y*vz.x };

    // Vector3Normalize(x)
    v = vx;
    length = math::sqrt(v.x*v.x + v.y*v.y + v.z*v.z);
    if (length == 0.0f) length = 1.0f;
    ilength = 1.0f/length;
    vx.x *= ilength;
    vx.y *= ilength;
    vx.z *= ilength;

    // Vector3CrossProduct(vz, vx)
    Vector3 vy = { vz.y*vx.z - vz.z*vx.y, vz.z*vx.x - vz.x*vx.z, vz.x*vx.y - vz.y*vx.x };

    result.m0 = vx.x;
    result.m1 = vy.x;
    result.m2 = vz.x;
    result.m3 = 0.0f;
    result.m4 = vx.y;
    result.m5 = vy.y;
    result.m6 = vz.y;
    result.m7 = 0.0f;
    result.m8 = vx.z;
    result.m9 = vy.z;
    result.m10 = vz.z;
    result.m11 = 0.0f;
    result.m12 = -(vx.x*eye.x + vx.y*eye.y + vx.z*eye.z);   // Vector3DotProduct(vx, eye)
    result.m13 = -(vy.x*eye.x + vy.y*eye.y + vy.z*eye.z);   // Vector3DotProduct(vy, eye)
    result.m14 = -(vz.x*eye.x + vz.y*eye.y + vz.z*eye.z);   // Vector3DotProduct(vz, eye)
    result.m15 = 1.0f;

    return *mat = result;
}

// Get float array of matrix data
fn Float16 Matrix.toFloatV(Matrix mat)
{
    Float16 result = { };

    result.v[0] = mat.m0;
    result.v[1] = mat.m1;
    result.v[2] = mat.m2;
    result.v[3] = mat.m3;
    result.v[4] = mat.m4;
    result.v[5] = mat.m5;
    result.v[6] = mat.m6;
    result.v[7] = mat.m7;
    result.v[8] = mat.m8;
    result.v[9] = mat.m9;
    result.v[10] = mat.m10;
    result.v[11] = mat.m11;
    result.v[12] = mat.m12;
    result.v[13] = mat.m13;
    result.v[14] = mat.m14;
    result.v[15] = mat.m15;

    return result;
}

//----------------------------------------------------------------------------------
// Module Functions Definition - Quaternion math
//----------------------------------------------------------------------------------

// Add two quaternions
fn Quaternion Quaternion.add(Quaternion* q1, Quaternion q2)
{
   return *q1 = {q1.x + q2.x, q1.y + q2.y, q1.z + q2.z, q1.w + q2.w};
}

// Add quaternion and float value
fn Quaternion Quaternion.addValue(Quaternion* q1, float add)
{
   return *q1 = {q1.x + add, q1.y + add, q1.z + add, q1.w + add};
}

// Subtract two quaternions
fn Quaternion Quaternion.subtract(Quaternion* q1, Quaternion q2)
{
   return *q1 = {q1.x - q2.x, q1.y - q2.y, q1.z - q2.z, q1.w - q2.w};
}

// Subtract quaternion and float value
fn Quaternion Quaternion.subtractValue(Quaternion* q, float sub)
{
   return *q = {q.x - sub, q.y - sub, q.z - sub, q.w - sub};
}

// Get identity quaternion
fn Quaternion Quaternion.identity(Quaternion* q)
{
   return *q = { 0.0f, 0.0f, 0.0f, 1.0f };
}

// Computes the length of a quaternion
fn float Quaternion.length(Quaternion q)
{
    float result = math::sqrt(q.x*q.x + q.y*q.y + q.z*q.z + q.w*q.w);

    return result;
}

// Normalize provided quaternion
fn Quaternion Quaternion.normalize(Quaternion* q)
{
    Quaternion result = {};

    float length = math::sqrt(q.x*q.x + q.y*q.y + q.z*q.z + q.w*q.w);
    if (length == 0.0f) length = 1.0f;
    float ilength = 1.0f/length;

    result.x = q.x*ilength;
    result.y = q.y*ilength;
    result.z = q.z*ilength;
    result.w = q.w*ilength;

   return *q = result;
}

// Invert provided quaternion
fn Quaternion Quaternion.invert(Quaternion* q)
{
    Quaternion result = *q;

    float lengthSq = q.x*q.x + q.y*q.y + q.z*q.z + q.w*q.w;

    if (lengthSq != 0.0f)
    {
        float invLength = 1.0f/lengthSq;

        result.x *= -invLength;
        result.y *= -invLength;
        result.z *= -invLength;
        result.w *= invLength;
    }

   return *q = result;
}

// Calculate two quaternion multiplication
fn Quaternion Quaternion.multiply(Quaternion* q1, Quaternion q2)
{
    Quaternion result = { };

    float qax = q1.x;
    float qay = q1.y;
    float qaz = q1.z;
    float qaw = q1.w;
    float qbx = q2.x;
    float qby = q2.y;
    float qbz = q2.z;
    float qbw = q2.w;

    result.x = qax*qbw + qaw*qbx + qay*qbz - qaz*qby;
    result.y = qay*qbw + qaw*qby + qaz*qbx - qax*qbz;
    result.z = qaz*qbw + qaw*qbz + qax*qby - qay*qbx;
    result.w = qaw*qbw - qax*qbx - qay*qby - qaz*qbz;

   return *q1 = result;
}

// Scale quaternion by float value
fn Quaternion Quaternion.scale(Quaternion* q, float mul)
{
    Quaternion result = { };

    result.x = q.x*mul;
    result.y = q.y*mul;
    result.z = q.z*mul;
    result.w = q.w*mul;

   return *q = result;
}

// Divide two quaternions
fn Quaternion Quaternion.divide(Quaternion* q1, Quaternion q2)
{
   return *q1 = { q1.x/q2.x, q1.y/q2.y, q1.z/q2.z, q1.w/q2.w };
}

// Calculate linear interpolation between two quaternions
fn Quaternion Quaternion.lerp(Quaternion* q1, Quaternion q2, float amount)
{
    Quaternion result = { };

    result.x = q1.x + amount*(q2.x - q1.x);
    result.y = q1.y + amount*(q2.y - q1.y);
    result.z = q1.z + amount*(q2.z - q1.z);
    result.w = q1.w + amount*(q2.w - q1.w);

   return *q1 = result;
}

// Calculate slerp-optimized interpolation between two quaternions
fn Quaternion Quaternion.nLerp(Quaternion* q1, Quaternion q2, float amount)
{
    Quaternion result = { };

    // QuaternionLerp(q1, q2, amount)
    result.x = q1.x + amount*(q2.x - q1.x);
    result.y = q1.y + amount*(q2.y - q1.y);
    result.z = q1.z + amount*(q2.z - q1.z);
    result.w = q1.w + amount*(q2.w - q1.w);

    // QuaternionNormalize(q);
    Quaternion q = result;
    float length = math::sqrt(q.x*q.x + q.y*q.y + q.z*q.z + q.w*q.w);
    if (length == 0.0f) length = 1.0f;
    float ilength = 1.0f/length;

    result.x = q.x*ilength;
    result.y = q.y*ilength;
    result.z = q.z*ilength;
    result.w = q.w*ilength;

   return *q1 = result;
}

// Calculates spherical linear interpolation between two quaternions
fn Quaternion Quaternion.sLerp(Quaternion* q1, Quaternion q2, float amount)
{
    Quaternion result = {};

    float cosHalfTheta = q1.x*q2.x + q1.y*q2.y + q1.z*q2.z + q1.w*q2.w;

    if (cosHalfTheta < 0)
    {
        q2.x = -q2.x; q2.y = -q2.y; q2.z = -q2.z; q2.w = -q2.w;
        cosHalfTheta = -cosHalfTheta;
    }

    if (math::abs(cosHalfTheta) >= 1.0f) 
    {
        result = *q1;
    } else if (cosHalfTheta > 0.95f) 
    {
        result.nLerp(q2, amount);
    }
    else
    {
        float halfTheta = math::cos(cosHalfTheta);
        float sinHalfTheta = math::sqrt(1.0f - cosHalfTheta*cosHalfTheta);

        if (math::abs(sinHalfTheta) < 0.001f)
        {
            result.x = (q1.x*0.5f + q2.x*0.5f);
            result.y = (q1.y*0.5f + q2.y*0.5f);
            result.z = (q1.z*0.5f + q2.z*0.5f);
            result.w = (q1.w*0.5f + q2.w*0.5f);
        }
        else
        {
            float ratioA = math::sin((1 - amount)*halfTheta)/sinHalfTheta;
            float ratioB = math::sin(amount*halfTheta)/sinHalfTheta;

            result.x = (q1.x*ratioA + q2.x*ratioB);
            result.y = (q1.y*ratioA + q2.y*ratioB);
            result.z = (q1.z*ratioA + q2.z*ratioB);
            result.w = (q1.w*ratioA + q2.w*ratioB);
        }
    }

   return *q1 = result;
}

// Calculate quaternion based on the rotation from one vector to another
fn Quaternion Quaternion.fromVector3ToVector3(Quaternion* q, Vector3 from, Vector3 to)
{
    Quaternion result = { };

    float cos2Theta = (from.x*to.x + from.y*to.y + from.z*to.z);    // Vector3DotProduct(from, to)
    Vector3 cross = { from.y*to.z - from.z*to.y, from.z*to.x - from.x*to.z, from.x*to.y - from.y*to.x }; // Vector3CrossProduct(from, to)

    result.x = cross.x;
    result.y = cross.y;
    result.z = cross.z;
    result.w = 1.0f + cos2Theta;

    // QuaternionNormalize(q);
    // NOTE: Normalize to essentially nlerp the original and identity to 0.5
    Quaternion qr = result;
    float length = math::sqrt(qr.x*qr.x + qr.y*qr.y + qr.z*qr.z + qr.w*qr.w);
    if (length == 0.0f) length = 1.0f;
    float ilength = 1.0f/length;

    result.x = qr.x*ilength;
    result.y = qr.y*ilength;
    result.z = qr.z*ilength;
    result.w = qr.w*ilength;

   return *q = result;
}

// Get a quaternion for a given rotation matrix
fn Quaternion Quaternion.fromMatrix(Quaternion* q, Matrix mat)
{
    Quaternion result = { };

    float fourWSquaredMinus1 = mat.m0 + mat.m5 + mat.m10;
    float fourXSquaredMinus1 = mat.m0 - mat.m5 - mat.m10;
    float fourYSquaredMinus1 = mat.m5 - mat.m0 - mat.m10;
    float fourZSquaredMinus1 = mat.m10 - mat.m0 - mat.m5;

    int biggestIndex = 0;
    float fourBiggestSquaredMinus1 = fourWSquaredMinus1;
    if (fourXSquaredMinus1 > fourBiggestSquaredMinus1)
    {
        fourBiggestSquaredMinus1 = fourXSquaredMinus1;
        biggestIndex = 1;
    }

    if (fourYSquaredMinus1 > fourBiggestSquaredMinus1)
    {
        fourBiggestSquaredMinus1 = fourYSquaredMinus1;
        biggestIndex = 2;
    }

    if (fourZSquaredMinus1 > fourBiggestSquaredMinus1)
    {
        fourBiggestSquaredMinus1 = fourZSquaredMinus1;
        biggestIndex = 3;
    }

    float biggestVal = math::sqrt(fourBiggestSquaredMinus1 + 1.0f) * 0.5f;
    float mult = 0.25f / biggestVal;

    switch (biggestIndex)
    {
        case 0:
            result.w = biggestVal;
            result.x = (mat.m6 - mat.m9) * mult;
            result.y = (mat.m8 - mat.m2) * mult;
            result.z = (mat.m1 - mat.m4) * mult;
            break;
        case 1:
            result.x = biggestVal;
            result.w = (mat.m6 - mat.m9) * mult;
            result.y = (mat.m1 + mat.m4) * mult;
            result.z = (mat.m8 + mat.m2) * mult;
            break;
        case 2:
            result.y = biggestVal;
            result.w = (mat.m8 - mat.m2) * mult;
            result.x = (mat.m1 + mat.m4) * mult;
            result.z = (mat.m6 + mat.m9) * mult;
            break;
        case 3:
            result.z = biggestVal;
            result.w = (mat.m1 - mat.m4) * mult;
            result.x = (mat.m8 + mat.m2) * mult;
            result.y = (mat.m6 + mat.m9) * mult;
            break;
    }

   return *q = result;
}

// Get a matrix for a given quaternion
fn Matrix Matrix.quaternionToMatrix(Matrix* mat, Quaternion q)
{
    Matrix result = { 1.0f, 0.0f, 0.0f, 0.0f,
                      0.0f, 1.0f, 0.0f, 0.0f,
                      0.0f, 0.0f, 1.0f, 0.0f,
                      0.0f, 0.0f, 0.0f, 1.0f }; // MatrixIdentity()

    float a2 = q.x*q.x;
    float b2 = q.y*q.y;
    float c2 = q.z*q.z;
    float ac = q.x*q.z;
    float ab = q.x*q.y;
    float bc = q.y*q.z;
    float ad = q.w*q.x;
    float bd = q.w*q.y;
    float cd = q.w*q.z;

    result.m0 = 1 - 2*(b2 + c2);
    result.m1 = 2*(ab + cd);
    result.m2 = 2*(ac - bd);

    result.m4 = 2*(ab - cd);
    result.m5 = 1 - 2*(a2 + c2);
    result.m6 = 2*(bc + ad);

    result.m8 = 2*(ac + bd);
    result.m9 = 2*(bc - ad);
    result.m10 = 1 - 2*(a2 + b2);

   return *mat = result;
}

// Get rotation quaternion for an angle and axis
// NOTE: Angle must be provided in radians
fn Quaternion Quaternion.fromAxisAngle(Quaternion* q, Vector3 axis, float angle)
{
    Quaternion result = { 0.0f, 0.0f, 0.0f, 1.0f };

    float axisLength = math::sqrt(axis.x*axis.x + axis.y*axis.y + axis.z*axis.z);

    if (axisLength != 0.0f)
    {
        angle *= 0.5f;

        float length = 0.0f;
        float ilength = 0.0f;

        // Vector3Normalize(axis)
        Vector3 v = axis;
        length = math::sqrt(v.x*v.x + v.y*v.y + v.z*v.z);
        if (length == 0.0f) length = 1.0f;
        ilength = 1.0f/length;
        axis.x *= ilength;
        axis.y *= ilength;
        axis.z *= ilength;

        float sinres = math::sin(angle);
        float cosres = math::cos(angle);

        result.x = axis.x*sinres;
        result.y = axis.y*sinres;
        result.z = axis.z*sinres;
        result.w = cosres;

        // QuaternionNormalize(q);
        Quaternion qr = result;
        length = math::sqrt(qr.x*qr.x + qr.y*qr.y + qr.z*qr.z + qr.w*qr.w);
        if (length == 0.0f) length = 1.0f;
        ilength = 1.0f/length;
        result.x = qr.x*ilength;
        result.y = qr.y*ilength;
        result.z = qr.z*ilength;
        result.w = qr.w*ilength;
    }

   return *q = result;
}

// Get the rotation angle and axis for a given quaternion
fn void Quaternion.toAxisAngle(Quaternion q, Vector3 *outAxis, float *outAngle)
{
    if (math::abs(q.w) > 1.0f)
    {
        // QuaternionNormalize(q);
        float length = math::sqrt(q.x*q.x + q.y*q.y + q.z*q.z + q.w*q.w);
        if (length == 0.0f) length = 1.0f;
        float ilength = 1.0f/length;

        q.x = q.x*ilength;
        q.y = q.y*ilength;
        q.z = q.z*ilength;
        q.w = q.w*ilength;
    }

    Vector3 resAxis = { 0.0f, 0.0f, 0.0f };
    float resAngle = 2.0f*math::cos(q.w);
    float den = math::sqrt(1.0f - q.w*q.w);

    if (den > 0.0001f)
    {
        resAxis.x = q.x/den;
        resAxis.y = q.y/den;
        resAxis.z = q.z/den;
    }
    else
    {
        // This occurs when the angle is zero.
        // Not a problem: just set an arbitrary normalized axis.
        resAxis.x = 1.0f;
    }

    *outAxis = resAxis;
    *outAngle = resAngle;
}

// Get the quaternion equivalent to Euler angles
// NOTE: Rotation order is ZYX
fn Quaternion Quaternion.fromEuler(Quaternion* q, float pitch, float yaw, float roll)
{
    Quaternion result = { };

    float x0 = math::cos(pitch*0.5f);
    float x1 = math::sin(pitch*0.5f);
    float y0 = math::cos(yaw*0.5f);
    float y1 = math::sin(yaw*0.5f);
    float z0 = math::cos(roll*0.5f);
    float z1 = math::sin(roll*0.5f);

    result.x = x1*y0*z0 - x0*y1*z1;
    result.y = x0*y1*z0 + x1*y0*z1;
    result.z = x0*y0*z1 - x1*y1*z0;
    result.w = x0*y0*z0 + x1*y1*z1;

    return *q = result;
}

// Get the Euler angles equivalent to quaternion (roll, pitch, yaw)
// NOTE: Angles are returned in a Vector3 struct in radians
fn Vector3 Vector3.quaternionToEuler(Vector3* v, Quaternion q)
{
    Vector3 result = { };

    // Roll (x-axis rotation)
    float x0 = 2.0f*(q.w*q.x + q.y*q.z);
    float x1 = 1.0f - 2.0f*(q.x*q.x + q.y*q.y);
    result.x = math::atan2(x0, x1);

    // Pitch (y-axis rotation)
    float y0 = 2.0f*(q.w*q.y - q.z*q.x);
    y0 = y0 > 1.0f ? 1.0f : y0;
    y0 = y0 < -1.0f ? -1.0f : y0;
    result.y = math::sin(y0);

    // Yaw (z-axis rotation)
    float z0 = 2.0f*(q.w*q.z + q.x*q.y);
    float z1 = 1.0f - 2.0f*(q.y*q.y + q.z*q.z);
    result.z = math::atan2(z0, z1);

   return *v = result;
}

// Transform a quaternion given a transformation matrix
fn Quaternion Quaternion.transform(Quaternion* q, Matrix mat)
{
    Quaternion result = { };

    result.x = mat.m0*q.x + mat.m4*q.y + mat.m8*q.z + mat.m12*q.w;
    result.y = mat.m1*q.x + mat.m5*q.y + mat.m9*q.z + mat.m13*q.w;
    result.z = mat.m2*q.x + mat.m6*q.y + mat.m10*q.z + mat.m14*q.w;
    result.w = mat.m3*q.x + mat.m7*q.y + mat.m11*q.z + mat.m15*q.w;

    return *q = result;
}

// Check whether two given quaternions are almost equal
fn bool Quaternion.equals(Quaternion p, Quaternion q)
{
    bool result = (((math::abs(p.x - q.x)) <= (EPSILON*math::max(1.0f, math::max(math::abs(p.x), math::abs(q.x))))) &&
                  ((math::abs(p.y - q.y)) <= (EPSILON*math::max(1.0f, math::max(math::abs(p.y), math::abs(q.y))))) &&
                  ((math::abs(p.z - q.z)) <= (EPSILON*math::max(1.0f, math::max(math::abs(p.z), math::abs(q.z))))) &&
                  ((math::abs(p.w - q.w)) <= (EPSILON*math::max(1.0f, math::max(math::abs(p.w), math::abs(q.w)))))) ||
                  (((math::abs(p.x + q.x)) <= (EPSILON*math::max(1.0f, math::max(math::abs(p.x), math::abs(q.x))))) &&
                  ((math::abs(p.y + q.y)) <= (EPSILON*math::max(1.0f, math::max(math::abs(p.y), math::abs(q.y))))) &&
                  ((math::abs(p.z + q.z)) <= (EPSILON*math::max(1.0f, math::max(math::abs(p.z), math::abs(q.z))))) &&
                  ((math::abs(p.w + q.w)) <= (EPSILON*math::max(1.0f, math::max(math::abs(p.w), math::abs(q.w))))));

    return result;
}
